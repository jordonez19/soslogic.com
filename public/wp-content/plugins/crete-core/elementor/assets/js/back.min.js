jQuery(window).on("elementor/frontend/init", () => {
    function d(o, t, i, d = !1, e = !1, l = [], r = !1) {
        let a = crete_elementor_object.crete_shapes,
            _ = "crete-divider ",
            s =
                (0 == r && (r = !1),
                (_ += " position-absolute crete-divider-in-elementor "),
                (container_style = ""),
                (container_style = "top" == i ? ((_ += "crete-top-divider"), 'style="top:-1px;"') : ((_ += "crete-bottom-divider"), 'style="bottom:-1px;"')),
                l.d_high_index && (_ += " crete-divider-in-front"),
                l.d_flip_h && (_ += " crete-divider-flip-h"),
                l.extra_classes && (_ += " " + l.extra_classes),
                (is_class_color = !1),
                l.is_class_color && (is_class_color = l.is_class_color),
                (d = d || Math.floor(1e5 * Math.random())),
                "");
        if (a.hasOwnProperty(o)) {
            var n = a[o];
            s += r
                ? '<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="' + r + '" viewBox="' + n.viewbox + '" preserveAspectRatio="none">'
                : '<svg xmlns="http://www.w3.org/2000/svg" width="100%"  viewBox="' + n.viewbox + '" preserveAspectRatio="none">';
            let _ = "";
            if ("24" === o) {
                let _ = [];
                (_.d_2_is_gradient = l.d_2_is_gradient ?? !1),
                    (_.d_2_color = l.d_2_color ?? "#ffffff"),
                    (_.d_2_color_2 = l.d_2_color_2 ?? "#ffffff"),
                    (_.d_2_animation = l.d_2_animation ?? ""),
                    (_.d_2_delay = l.d_2_delay ?? ""),
                    (l.d_2_is_gradient = l.d_1_is_gradient ?? !1),
                    (l.d_2_color = l.d_1_color ?? "#ffffff"),
                    (l.d_2_color_2 = l.d_1_color_2 ?? "#ffffff"),
                    (l.d_2_animation = l.d_1_animation ?? ""),
                    (l.d_2_delay = l.d_1_delay ?? ""),
                    (l.d_1_is_gradient = _.d_2_is_gradient),
                    (l.d_1_color = _.d_2_color),
                    (l.d_1_color_2 = _.d_2_color_2),
                    (l.d_1_animation = _.d_2_animation),
                    (l.d_1_delay = _.d_2_delay);
            }
            if (2 < l.d_layers) {
                if ((l.d_3_animation && (s += '<g class="animate-in" data-anim-type="' + l.d_3_animation + '" data-anim-delay="' + l.d_3_delay + '">'), l.d_3_is_gradient))
                    if (
                        ((c_2 = l.d_3_color_2),
                        l.d_3_color_2 || (c_2 = l.d_3_color),
                        (_ =
                            (_ = (_ += '<linearGradient id="divider-' + d + "-" + i + '-overlay-layer-3" x1="0%" y1="0%" x2="100%" y2="0%">') + ('<stop offset="0%"   stop-color="' + l.d_3_color + '"/>')) +
                            ('<stop offset="100%"   stop-color="' + c_2 + '"/>') +
                            "</linearGradient>"),
                        n.groups && n.groups)
                    ) {
                        let _ = "";
                        n.groups_meta[2] && (_ = n.groups_meta[2]), (s += "<" + n.tag + ' fill="url(#divider-' + d + "-" + i + '-overlay-layer-3)" ' + _ + ">" + n.content[2] + "</" + n.tag + ">");
                    } else s += "<" + n.tag + ' fill="url(#divider-' + d + "-" + i + '-overlay-layer-3)" ' + n.content[2] + " />";
                else if (is_class_color)
                    n.groups && n.groups
                        ? ((gmeta = ""), n.groups_meta[2] && (gmeta = n.groups_meta[2]), (s += "<" + n.tag + ' class="' + l.d_1_color + '" fill-opacity="0.2" ' + gmeta + ">" + n.content[2] + "</" + n.tag + ">"))
                        : (s += "<" + n.tag + ' class="' + l.d_1_color + '" fill-opacity="0.2" ' + n.content[2] + "  />");
                else {
                    let _ = "rgba(255,255,255,0.2)",
                        o = "";
                    l.d_3_color ? (_ = l.d_3_color) : ((_ = l.d_1_color), (o = 'fill-opacity="0.2"')),
                        n.groups && n.groups
                            ? ((gmeta = ""), n.groups_meta[2] && (gmeta = n.groups_meta[2]), (s += "<" + n.tag + ' fill="' + _ + '" ' + gmeta + ">" + n.content[2] + "</" + n.tag + ">"))
                            : (s += "<" + n.tag + ' fill="' + _ + '" ' + o + " " + n.content[2] + "  />");
                }
                l.d_3_animation && (s += "</g>");
            }
            1 < l.d_layers &&
                (l.d_2_animation && (s += '<g class="animate-in" data-anim-type="' + l.d_2_animation + '" data-anim-delay="' + l.d_2_delay + '">'),
                l.d_2_is_gradient
                    ? ((c_2 = l.d_2_color_2),
                      l.d_2_color_2 || (c_2 = l.d_2_color),
                      (_ =
                          (_ = (_ += '<linearGradient id="divider-' + d + "-" + i + '-overlay-layer-2" x1="0%" y1="0%" x2="100%" y2="0%">') + '<stop offset="0%"   stop-color="' + l.d_2_color + '"/>') +
                          '<stop offset="100%"   stop-color="' +
                          c_2 +
                          '"/></linearGradient>'),
                      n.groups && n.groups
                          ? ((gmeta = ""), n.groups_meta[1] && (gmeta = n.groups_meta[1]), (s += "<" + n.tag + ' fill="url(#divider-' + d + "-" + i + '-overlay-layer-2)" ' + gmeta + ">" + n.content[1] + "</" + n.tag + ">"))
                          : (s += "<" + n.tag + ' fill="url(#divider-' + d + "-" + i + '-overlay-layer-2)" ' + n.content[1] + "  />"))
                    : is_class_color
                    ? n.groups && n.groups
                        ? ((gmeta = ""), n.groups_meta[1] && (gmeta = n.groups_meta[1]), (s += "<" + n.tag + ' class="' + l.d_1_color + '" fill-opacity="0.6" ' + gmeta + ">" + n.content[1] + "</" + n.tag + ">"))
                        : (s += "<" + n.tag + ' class="' + l.d_1_color + '" fill-opacity="0.6" ' + n.content[1] + "  />")
                    : ((t = "rgba(255,255,255,0.6)"),
                      (fill_op = ""),
                      l.d_2_color ? (t = l.d_2_color) : ((t = l.d_1_color), (fill_op = 'fill-opacity="0.6"')),
                      n.groups && n.groups
                          ? ((gmeta = ""), n.groups_meta[1] && (gmeta = n.groups_meta[1]), (s += "<" + n.tag + ' fill="' + t + '" ' + fill_op + " " + gmeta + ">" + n.content[1] + "</" + n.tag + ">"))
                          : (s += "<" + n.tag + ' fill="' + t + '" ' + fill_op + " " + n.content[1] + " />")),
                l.d_2_animation && (s += "</g>")),
                l.d_1_animation && (s += '<g class="animate-in" data-anim-type="' + l.d_1_animation + '" data-anim-delay="' + l.d_1_delay + '">'),
                l.d_1_is_gradient
                    ? ((c_2 = l.d_1_color_2),
                      l.d_1_color_2 || (c_2 = l.d_1_color),
                      (_ =
                          (_ = (_ += '<linearGradient id="divider-' + d + "-" + i + '-overlay-layer-1" x1="0%" y1="0%" x2="100%" y2="0%">') + '<stop offset="0%"   stop-color="' + l.d_1_color + '"/>') +
                          '<stop offset="100%"   stop-color="' +
                          c_2 +
                          '"/></linearGradient>'),
                      n.groups && n.groups
                          ? ((gmeta = ""), n.groups_meta[0] && (gmeta = n.groups_meta[0]), (s += "<" + n.tag + ' fill="url(#divider-' + d + "-" + i + '-overlay-layer-1)" ' + gmeta + ">" + n.content[0] + "</" + n.tag + ">"))
                          : (s += "<" + n.tag + ' fill="url(#divider-' + d + "-" + i + '-overlay-layer-1)" ' + n.content[0] + "/>"))
                    : is_class_color
                    ? n.groups && n.groups
                        ? ((gmeta = ""), n.groups_meta[0] && (gmeta = n.groups_meta[0]), (s += "<" + n.tag + ' class="' + l.d_1_color + '" ' + gmeta + ">" + n.content[0] + "</" + n.tag + ">"))
                        : (s += "<" + n.tag + ' class="' + l.d_1_color + '" ' + n.content[0] + "/>")
                    : n.groups && n.groups
                    ? ((gmeta = ""), n.groups_meta[0] && (gmeta = n.groups_meta[0]), (s += "<" + n.tag + ' fill="' + l.d_1_color + '" ' + gmeta + ">" + n.content[0] + "</" + n.tag + ">"))
                    : (s += "<" + n.tag + ' fill="' + l.d_1_color + '" ' + n.content[0] + "/>"),
                l.d_1_animation && (s += "</g>"),
                (s = s + ("<defs>" + _ + "</defs>") + "</svg>");
        }
        let c = "",
            p = "";
        if (((output = '<div class="' + _ + '" data-style="style-' + o + '" ' + container_style + ">"), "dynamic" == l.d_divider_select)) {
            (colors = e.length ? e.models : colors).forEach(function (_, o) {
                let t = _.attributes,
                    e = (t.d_color_1 || (t.d_color_1 = "#fff"), t.d_color_1);
                t.d_gradient && "1" == t.d_gradient
                    ? (t.d_color_2 && (e = t.d_color_2),
                      (c =
                          (c = (c += '<linearGradient id="divider-' + d + "-" + i + "-overlay-color-" + o + '" x1="0%" y1="0%" x2="100%" y2="0%">') + '<stop offset="0%"   stop-color="' + t.d_color_1 + '"/>') +
                          '<stop offset="100%"   stop-color="' +
                          e +
                          '"/></linearGradient>'),
                      (p += '<path d="" class="" fill="url(#divider-' + d + "-" + i + "-overlay-color-" + o + ')"></path>'))
                    : (p += '<path d="" class="" fill="' + t.d_color_1 + '"></path>');
            });
            let _ = r ? 'style="height:' + r + ' !important;"' : "";
            (dynamic = '<div class="crete-dividers-box" ' + _ + ">"),
                (dynamic = (dynamic = (dynamic += '<svg class="crete-shape-dividers" ' + _ + ' viewBox="0 0 100 100" preserveAspectRatio="none">') + ("<defs>" + c + "</defs>" + p)) + "</svg>" + "</div>"),
                (output += dynamic);
        } else output += s;
        return (output += "</div>");
    }
    var _ = (_) => {
        var i = _.attr("data-model-cid");
        if (void 0 !== i && !1 !== i) {
            let t = elementorFrontend.config.elements.data[i].attributes,
                e = "";
            var i = Math.floor(1e5 * Math.random()),
                o = t.crete_sticky_top;
            if (
                (o &&
                    "true" === o &&
                    ((o = 20),
                    0 < $(".crete-enable-sticky, .crete-is-sticky-header").length && ((o = $(".crete-header").height()), 0 < $("#masthead").length && ($("#masthead").hasClass("crete-header-box") ? (o += 20) : (o += 10))),
                    _.addClass("sticky-top crete-sticky-top-adjust"),
                    _.css({ top: o })),
                t.top_divider_select && "" != t.top_divider_select && "0" != t.top_divider_select && "dynamic" != t.top_divider_select)
            ) {
                t_divider_opts = {
                    d_divider_select: t.top_divider_select,
                    d_layers: t.top_layers,
                    d_1_is_gradient: t.t_1_is_gradient,
                    d_1_color: t.t_1_color,
                    d_1_color_2: t.t_1_color_2,
                    d_1_animation: t.t_1_animation,
                    d_1_delay: t.t_1_delay,
                    d_2_is_gradient: t.t_2_is_gradient,
                    d_2_color: t.t_2_color,
                    d_2_color_2: t.t_2_color_2,
                    d_2_animation: t.t_2_animation,
                    d_2_delay: t.t_2_delay,
                    d_3_is_gradient: t.t_3_is_gradient,
                    d_3_color: t.t_3_color,
                    d_3_color_2: t.t_3_color_2,
                    d_3_animation: t.t_3_animation,
                    d_3_delay: t.t_3_delay,
                    d_high_index: t.t_divider_in_front,
                    d_flip_h: t.t_flip_h,
                    is_element: !0,
                };
                let o = { t_1_color: "d_1_color", t_1_color_2: "d_1_color_2", t_2_color: "d_2_color", t_2_color_2: "d_2_color_2", t_3_color: "d_3_color", t_3_color_2: "d_2_color_2" },
                    _ =
                        (Object.keys(o).forEach(function (_) {
                            t.__globals__ &&
                                t.__globals__.hasOwnProperty(_) &&
                                "" !== t.__globals__[_] &&
                                ((t_divider_opts[o[_]] = t.__globals__[_].replace("globals/colors?id=", "")), (t_divider_opts[o[_]] = "var(--e-global-color-" + t_divider_opts[o[_]] + ")"));
                        }),
                        !1);
                t.t_custom_height && (_ = t.t_custom_height), (e += d(t.top_divider_select, t.top_divider_color, "top", i, t.top_moving_divider_color, t_divider_opts, _));
            }
            if (
                (t.top_divider_select &&
                    "dynamic" == t.top_divider_select &&
                    ((o = { d_divider_select: t.top_divider_select, d_high_index: t.t_divider_in_front, d_flip_h: t.t_flip_h, is_element: !0 }), (e += d(t.top_divider_select, t.top_divider_color, "top", i, t.top_moving_divider_color, o))),
                t.bottom_divider_select && "" != t.bottom_divider_select && "0" != t.bottom_divider_select && "dynamic" != t.bottom_divider_select)
            ) {
                b_divider_opts = {
                    d_divider_select: t.bottom_divider_select,
                    d_layers: t.bottom_layers,
                    d_1_is_gradient: t.b_1_is_gradient,
                    d_1_color: t.b_1_color,
                    d_1_color_2: t.b_1_color_2,
                    d_1_animation: t.b_1_animation,
                    d_1_delay: t.b_1_delay,
                    d_2_is_gradient: t.b_2_is_gradient,
                    d_2_color: t.b_2_color,
                    d_2_color_2: t.b_2_color_2,
                    d_2_animation: t.b_2_animation,
                    d_2_delay: t.b_2_delay,
                    d_3_is_gradient: t.b_3_is_gradient,
                    d_3_color: t.b_3_color,
                    d_3_color_2: t.b_3_color_2,
                    d_3_animation: t.b_3_animation,
                    d_3_delay: t.b_3_delay,
                    d_high_index: t.b_divider_in_front,
                    d_flip_h: t.b_flip_h,
                    is_element: !0,
                };
                let o = { b_1_color: "d_1_color", b_1_color_2: "d_1_color_2", b_2_color: "d_2_color", b_2_color_2: "d_2_color_2", b_3_color: "d_3_color", b_3_color_2: "d_2_color_2" },
                    _ =
                        (Object.keys(o).forEach(function (_) {
                            t.__globals__ &&
                                t.__globals__.hasOwnProperty(_) &&
                                "" !== t.__globals__[_] &&
                                ((t_divider_opts[o[_]] = t.__globals__[_].replace("globals/colors?id=", "")), (t_divider_opts[o[_]] = "var(--e-global-color-" + t_divider_opts[o[_]] + ")"));
                        }),
                        !1);
                t.b_custom_height && (_ = t.b_custom_height), (e += d(t.bottom_divider_select, t.bottom_divider_color, "bottom", i, t.bottom_moving_divider_color, b_divider_opts, _));
            }
            t.bottom_divider_select &&
                "dynamic" == t.bottom_divider_select &&
                ((b_divider_opts = { d_divider_select: t.bottom_divider_select, d_high_index: t.b_divider_in_front, d_flip_h: t.b_flip_h, is_element: !0 }),
                (e += d(t.bottom_divider_select, t.bottom_divider_color, "bottom", i, t.bottom_moving_divider_color, b_divider_opts)));
            o = _.hasClass("elementor-column");
            (o ? _.find("> .elementor-column-wrap > .crete-divider") : _.find("> .crete-divider")).remove(),
                e &&
                    "" !== e &&
                    ((o ? _.find("> .elementor-column-wrap") : _).prepend(e),
                    
                    _.find(".crete-shape-dividers").each(function () {
                        if (jQuery(this).hasClass("loaded")) {
                            let _ = new dividerShapes(this);
                            _.initPoints(), jQuery(this).addClass("loaded");
                        }
                    }));
        }
    };
    "undefined" != typeof elementorFrontend &&
        null !== elementorFrontend &&
        (elementorFrontend.hooks.addAction("frontend/element_ready/section", _), elementorFrontend.hooks.addAction("frontend/element_ready/column", _), elementorFrontend.hooks.addAction("frontend/element_ready/container", _));
});
//# sourceMappingURL=back.min.js.map
